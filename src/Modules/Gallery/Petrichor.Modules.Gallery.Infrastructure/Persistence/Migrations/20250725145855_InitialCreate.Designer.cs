// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Petrichor.Modules.Gallery.Infrastructure.Persistence;

#nullable disable

namespace Petrichor.Modules.Gallery.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(GalleryDbContext))]
    [Migration("20250725145855_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gallery")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImageTags", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("images_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("ImagesId", "TagsId")
                        .HasName("pk_image_tags");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_image_tags_tags_id");

                    b.ToTable("image_tags", "gallery");
                });

            modelBuilder.Entity("Petrichor.Modules.Gallery.Domain.Images.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("UploadedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_date_time");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("uploader_id");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images", "gallery");
                });

            modelBuilder.Entity("Petrichor.Modules.Gallery.Domain.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags", "gallery");
                });

            modelBuilder.Entity("ImageTags", b =>
                {
                    b.HasOne("Petrichor.Modules.Gallery.Domain.Images.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_tags_images_images_id");

                    b.HasOne("Petrichor.Modules.Gallery.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_tags_tags_tags_id");
                });

            modelBuilder.Entity("Petrichor.Modules.Gallery.Domain.Images.Image", b =>
                {
                    b.OwnsOne("Petrichor.Modules.Gallery.Domain.Images.ValueObjects.OriginalImage", "OriginalImage", b1 =>
                        {
                            b1.Property<Guid>("ImageId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("OriginalImageHeight");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("OriginalImagePath");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("OriginalImageWidth");

                            b1.HasKey("ImageId");

                            b1.ToTable("images", "gallery");

                            b1.WithOwner()
                                .HasForeignKey("ImageId")
                                .HasConstraintName("fk_images_images_id");
                        });

                    b.OwnsOne("Petrichor.Modules.Gallery.Domain.Images.ValueObjects.Thumbnail", "Thumbnail", b1 =>
                        {
                            b1.Property<Guid>("ImageId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("ThumbnailHeight");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ThumbnailPath");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("ThumbnailWidth");

                            b1.HasKey("ImageId");

                            b1.ToTable("images", "gallery");

                            b1.WithOwner()
                                .HasForeignKey("ImageId")
                                .HasConstraintName("fk_images_images_id");
                        });

                    b.Navigation("OriginalImage")
                        .IsRequired();

                    b.Navigation("Thumbnail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

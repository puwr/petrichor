import {
  HttpTestingController,
  provideHttpClientTesting,
  TestRequest,
} from '@angular/common/http/testing';
import { AuthService } from './auth.service';
import { environment } from '../../../environments/environment';
import { TestBed } from '@angular/core/testing';
import { provideHttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { AccountService } from './account.service';
import { signal, WritableSignal } from '@angular/core';
import { User } from '../../shared/models/user';
import { mockUser } from '../../../testing/test-data';

describe('AuthService', () => {
  let authService: AuthService;
  let httpMock: HttpTestingController;

  let accountService: { currentUser: WritableSignal<User | null> };
  let router: Router;

  const apiUrl = environment.apiUrl;

  beforeEach(() => {
    accountService = { currentUser: signal<User | null>(null) };

    TestBed.configureTestingModule({
      providers: [
        provideHttpClient(),
        provideHttpClientTesting(),
        AuthService,
        {
          provide: AccountService,
          useValue: accountService,
        },
      ],
    });

    authService = TestBed.inject(AuthService);
    httpMock = TestBed.inject(HttpTestingController);

    router = TestBed.inject(Router);
    vi.spyOn(router, 'navigateByUrl');
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(authService).toBeTruthy();
  });

  describe('logout', () => {
    let req: TestRequest;

    beforeEach(() => {
      accountService.currentUser.set(mockUser);
      authService.logout().subscribe();
      req = httpMock.expectOne(`${apiUrl}/auth/logout`);
    });

    it('should log out user and redirect to home page on success', () => {
      req.flush(null);

      expect(accountService.currentUser()).toBeNull();
      expect(router.navigateByUrl).toHaveBeenCalledWith('/');
    });

    it('should log out user and redirect to home page on error', () => {
      req.flush(new ErrorEvent('Error'));

      expect(accountService.currentUser()).toBeNull();
      expect(router.navigateByUrl).toHaveBeenCalledWith('/');
    });
  });
});
